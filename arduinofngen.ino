#include <LiquidCrystal.h>

#ifndef ASYNC_ANALOG_H
#define ASYNC_ANALOG_H

#ifndef EMIT_H
#define EMIT_H

#define BUF_SIZE 2048
uint8_t a_buf[BUF_SIZE];
uint8_t c_buf[BUF_SIZE];
uint8_t l_buf[BUF_SIZE];

uint16_t emit_mask = 0xffff;

//*
// Original (less expensive) version:
#define emit()                                          \
  do {                                                  \
    uint16_t EMIT_t = TCNT3 & emit_mask;                \
    uint8_t  EMIT_a = a_buf[EMIT_t];                    \
    uint8_t  EMIT_c = c_buf[EMIT_t];                    \
    uint8_t  EMIT_l = l_buf[EMIT_t];                    \
    PORTA = EMIT_a;                                     \
    PORTC = EMIT_c;                                     \
    PORTL = EMIT_l;                                     \
  } while (0)
// */

/*
// More expensive version to test:
#define emit()                                          \
  do {                                                  \
    uint16_t EMIT_t = TCNT3 & emit_mask;                \
    uint8_t  EMIT_ah = a_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_al = a_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_ch = c_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_cl = c_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_lh = l_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_ll = l_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_a = EMIT_ah << 4 | EMIT_al;           \
    uint8_t  EMIT_c = EMIT_ch << 4 | EMIT_cl;           \
    uint8_t  EMIT_l = EMIT_lh << 4 | EMIT_ll;           \
    PORTA = EMIT_a;                                     \
    PORTC = EMIT_c;                                     \
    PORTL = EMIT_l;                                     \
  } while (0)
// */

#endif

uint16_t *async_analog_dest = 0;

#define async_analog_ready() (!async_analog_dest)

#define async_analog_check()                                            \
  do                                                                    \
  {                                                                     \
    if (async_analog_dest && !bit_is_set(ADCSRA, ADSC))                 \
    {                                                                   \
      uint8_t low, high;                                                \
      low  = ADCL;                                                      \
      high = ADCH;                                                      \
      *async_analog_dest = high << 8 | low;                             \
      async_analog_dest = 0;                                            \
    }                                                                   \
  } while (0)

#define async_analog_read(pin, into)                                    \
  do                                                                    \
  {                                                                     \
    if (async_analog_ready())                                           \
    {                                                                   \
      async_analog_dest = (into);                                       \
      ADMUX   = DEFAULT << 6 | (pin) & 7;                               \
      ADCSRB  = ((pin) >> 3 & 1) << MUX5;                               \
      ADCSRA |= 1 << ADSC;                                              \
    }                                                                   \
  } while (0)

class AnalogMonitor
{
 private:
  uint8_t  pin;
  uint8_t  last_value;
  uint16_t value;

 public:
  AnalogMonitor(uint8_t _pin): pin(_pin), last_value(0), value(0) {}

  void reset()
  {
    last_value = value >> 2;
  }

  void sync()
  {
    update();
    while (!async_analog_ready())
    {
      emit();
      async_analog_check();
    }
    reset();
  }

  char delta(int shift)
  {
    async_analog_check();
    return ((char) (value >> 2) - (char) last_value) + (1 << shift - 1)
           >> shift;
  }

  void update()
  {
    async_analog_check();
    async_analog_read(pin, &value);
  }

  uint16_t val()
  {
    async_analog_check();
    return value;
  }
};

#define N_POTS (sizeof(pots) / sizeof(AnalogMonitor))
#define CODE_POT 1
#define MOVE_POT 2
#define LCD_POT  6

AnalogMonitor pots[] = { AnalogMonitor(9),
                         AnalogMonitor(10),
                         AnalogMonitor(11),
                         AnalogMonitor(12),
                         AnalogMonitor(13),
                         AnalogMonitor(14),
                         AnalogMonitor(0) };

bool any_pot_delta = false;
char which_pot     = 0;

#define check_pot()                                             \
  do {                                                          \
    if (++which_pot >= N_POTS) which_pot = 0;                   \
    pots[which_pot].update();                                   \
    any_pot_delta |= pots[which_pot].delta(5);                  \
  } while (0)

#endif
#ifndef ASYNC_ANALOG_H
#define ASYNC_ANALOG_H

#ifndef EMIT_H
#define EMIT_H

#define BUF_SIZE 2048
uint8_t a_buf[BUF_SIZE];
uint8_t c_buf[BUF_SIZE];
uint8_t l_buf[BUF_SIZE];

uint16_t emit_mask = 0xffff;

//*
// Original (less expensive) version:
#define emit()                                          \
  do {                                                  \
    uint16_t EMIT_t = TCNT3 & emit_mask;                \
    uint8_t  EMIT_a = a_buf[EMIT_t];                    \
    uint8_t  EMIT_c = c_buf[EMIT_t];                    \
    uint8_t  EMIT_l = l_buf[EMIT_t];                    \
    PORTA = EMIT_a;                                     \
    PORTC = EMIT_c;                                     \
    PORTL = EMIT_l;                                     \
  } while (0)
// */

/*
// More expensive version to test:
#define emit()                                          \
  do {                                                  \
    uint16_t EMIT_t = TCNT3 & emit_mask;                \
    uint8_t  EMIT_ah = a_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_al = a_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_ch = c_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_cl = c_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_lh = l_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_ll = l_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_a = EMIT_ah << 4 | EMIT_al;           \
    uint8_t  EMIT_c = EMIT_ch << 4 | EMIT_cl;           \
    uint8_t  EMIT_l = EMIT_lh << 4 | EMIT_ll;           \
    PORTA = EMIT_a;                                     \
    PORTC = EMIT_c;                                     \
    PORTL = EMIT_l;                                     \
  } while (0)
// */

#endif

uint16_t *async_analog_dest = 0;

#define async_analog_ready() (!async_analog_dest)

#define async_analog_check()                                            \
  do                                                                    \
  {                                                                     \
    if (async_analog_dest && !bit_is_set(ADCSRA, ADSC))                 \
    {                                                                   \
      uint8_t low, high;                                                \
      low  = ADCL;                                                      \
      high = ADCH;                                                      \
      *async_analog_dest = high << 8 | low;                             \
      async_analog_dest = 0;                                            \
    }                                                                   \
  } while (0)

#define async_analog_read(pin, into)                                    \
  do                                                                    \
  {                                                                     \
    if (async_analog_ready())                                           \
    {                                                                   \
      async_analog_dest = (into);                                       \
      ADMUX   = DEFAULT << 6 | (pin) & 7;                               \
      ADCSRB  = ((pin) >> 3 & 1) << MUX5;                               \
      ADCSRA |= 1 << ADSC;                                              \
    }                                                                   \
  } while (0)

class AnalogMonitor
{
 private:
  uint8_t  pin;
  uint8_t  last_value;
  uint16_t value;

 public:
  AnalogMonitor(uint8_t _pin): pin(_pin), last_value(0), value(0) {}

  void reset()
  {
    last_value = value >> 2;
  }

  void sync()
  {
    update();
    while (!async_analog_ready())
    {
      emit();
      async_analog_check();
    }
    reset();
  }

  char delta(int shift)
  {
    async_analog_check();
    return ((char) (value >> 2) - (char) last_value) + (1 << shift - 1)
           >> shift;
  }

  void update()
  {
    async_analog_check();
    async_analog_read(pin, &value);
  }

  uint16_t val()
  {
    async_analog_check();
    return value;
  }
};

#define N_POTS (sizeof(pots) / sizeof(AnalogMonitor))
#define CODE_POT 1
#define MOVE_POT 2
#define LCD_POT  6

AnalogMonitor pots[] = { AnalogMonitor(9),
                         AnalogMonitor(10),
                         AnalogMonitor(11),
                         AnalogMonitor(12),
                         AnalogMonitor(13),
                         AnalogMonitor(14),
                         AnalogMonitor(0) };

bool any_pot_delta = false;
char which_pot     = 0;

#define check_pot()                                             \
  do {                                                          \
    if (++which_pot >= N_POTS) which_pot = 0;                   \
    pots[which_pot].update();                                   \
    any_pot_delta |= pots[which_pot].delta(5);                  \
  } while (0)

#endif
#ifndef EMIT_H
#define EMIT_H

#define BUF_SIZE 2048
uint8_t a_buf[BUF_SIZE];
uint8_t c_buf[BUF_SIZE];
uint8_t l_buf[BUF_SIZE];

uint16_t emit_mask = 0xffff;

//*
// Original (less expensive) version:
#define emit()                                          \
  do {                                                  \
    uint16_t EMIT_t = TCNT3 & emit_mask;                \
    uint8_t  EMIT_a = a_buf[EMIT_t];                    \
    uint8_t  EMIT_c = c_buf[EMIT_t];                    \
    uint8_t  EMIT_l = l_buf[EMIT_t];                    \
    PORTA = EMIT_a;                                     \
    PORTC = EMIT_c;                                     \
    PORTL = EMIT_l;                                     \
  } while (0)
// */

/*
// More expensive version to test:
#define emit()                                          \
  do {                                                  \
    uint16_t EMIT_t = TCNT3 & emit_mask;                \
    uint8_t  EMIT_ah = a_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_al = a_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_ch = c_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_cl = c_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_lh = l_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_ll = l_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_a = EMIT_ah << 4 | EMIT_al;           \
    uint8_t  EMIT_c = EMIT_ch << 4 | EMIT_cl;           \
    uint8_t  EMIT_l = EMIT_lh << 4 | EMIT_ll;           \
    PORTA = EMIT_a;                                     \
    PORTC = EMIT_c;                                     \
    PORTL = EMIT_l;                                     \
  } while (0)
// */

#endif
#ifndef INTERPRETER_H
#define INTERPRETER_H

#ifndef EMIT_H
#define EMIT_H

#define BUF_SIZE 2048
uint8_t a_buf[BUF_SIZE];
uint8_t c_buf[BUF_SIZE];
uint8_t l_buf[BUF_SIZE];

uint16_t emit_mask = 0xffff;

//*
// Original (less expensive) version:
#define emit()                                          \
  do {                                                  \
    uint16_t EMIT_t = TCNT3 & emit_mask;                \
    uint8_t  EMIT_a = a_buf[EMIT_t];                    \
    uint8_t  EMIT_c = c_buf[EMIT_t];                    \
    uint8_t  EMIT_l = l_buf[EMIT_t];                    \
    PORTA = EMIT_a;                                     \
    PORTC = EMIT_c;                                     \
    PORTL = EMIT_l;                                     \
  } while (0)
// */

/*
// More expensive version to test:
#define emit()                                          \
  do {                                                  \
    uint16_t EMIT_t = TCNT3 & emit_mask;                \
    uint8_t  EMIT_ah = a_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_al = a_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_ch = c_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_cl = c_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_lh = l_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_ll = l_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_a = EMIT_ah << 4 | EMIT_al;           \
    uint8_t  EMIT_c = EMIT_ch << 4 | EMIT_cl;           \
    uint8_t  EMIT_l = EMIT_lh << 4 | EMIT_ll;           \
    PORTA = EMIT_a;                                     \
    PORTC = EMIT_c;                                     \
    PORTL = EMIT_l;                                     \
  } while (0)
// */

#endif
#ifndef REPEAT_H
#define REPEAT_H

#define repeat_2(x) x x
#define repeat_4(x) repeat_2(repeat_2(x))
#define repeat_8(x) repeat_4(repeat_2(x))
#define repeat_16(x) repeat_4(repeat_4(x))
#define repeat_32(x) repeat_8(repeat_4(x))
#define repeat_64(x) repeat_8(repeat_8(x))

#endif
#ifndef WAVETABLES_H
#define WAVETABLES_H

#include <avr/pgmspace.h>



#define WT_BITS 12
#define WT_SIZE 4096


#define WT_INTERP (16 - WT_BITS)
#define WT_MASK   (WT_SIZE - 1)

// Quarter-turn sine table, so we mirror and negate accordingly
uint16_t const sine_qtable[] PROGMEM = {
32768,32780,32793,32805,32818,32830,32843,32855,32868,32881,32893,32906,32918,32931,32943,32956,32969,32981,32994,33006,33019,33031,33044,33057,33069,33082,33094,33107,33119,33132,33144,33157,33170,33182,33195,33207,33220,33232,33245,33258,33270,33283,33295,33308,33320,33333,33346,33358,33371,33383,33396,33408,33421,33433,33446,33459,33471,33484,33496,33509,33521,33534,33547,33559,33572,33584,33597,33609,33622,33634,33647,33660,33672,33685,33697,33710,33722,33735,33748,33760,33773,33785,33798,33810,33823,33835,33848,33861,33873,33886,33898,33911,33923,33936,33948,33961,33974,33986,33999,34011,34024,34036,34049,34061,34074,34087,34099,34112,34124,34137,34149,34162,34174,34187,34200,34212,34225,34237,34250,34262,34275,34287,34300,34313,34325,34338,34350,34363,34375,34388,34400,34413,34426,34438,34451,34463,34476,34488,34501,34513,34526,34538,34551,34564,34576,34589,34601,34614,34626,34639,34651,34664,34676,34689,34702,34714,34727,34739,34752,34764,34777,34789,34802,34814,34827,34840,34852,34865,34877,34890,34902,34915,34927,34940,34952,34965,34977,34990,35003,35015,35028,35040,35053,35065,35078,35090,35103,35115,35128,35140,35153,35165,35178,35191,35203,35216,35228,35241,35253,35266,35278,35291,35303,35316,35328,35341,35353,35366,35378,35391,35404,35416,35429,35441,35454,35466,35479,35491,35504,35516,35529,35541,35554,35566,35579,35591,35604,35616,35629,35641,35654,35666,35679,35691,35704,35717,35729,35742,35754,35767,35779,35792,35804,35817,35829,35842,35854,35867,35879,35892,35904,35917,35929,35942,35954,35967,35979,35992,36004,36017,36029,36042,36054,36067,36079,36092,36104,36117,36129,36142,36154,36167,36179,36192,36204,36217,36229,36242,36254,36267,36279,36292,36304,36317,36329,36342,36354,36367,36379,36392,36404,36417,36429,36442,36454,36467,36479,36492,36504,36517,36529,36541,36554,36566,36579,36591,36604,36616,36629,36641,36654,36666,36679,36691,36704,36716,36729,36741,36754,36766,36779,36791,36803,36816,36828,36841,36853,36866,36878,36891,36903,36916,36928,36941,36953,36966,36978,36990,37003,37015,37028,37040,37053,37065,37078,37090,37103,37115,37127,37140,37152,37165,37177,37190,37202,37215,37227,37240,37252,37264,37277,37289,37302,37314,37327,37339,37352,37364,37376,37389,37401,37414,37426,37439,37451,37464,37476,37488,37501,37513,37526,37538,37551,37563,37575,37588,37600,37613,37625,37638,37650,37662,37675,37687,37700,37712,37725,37737,37749,37762,37774,37787,37799,37811,37824,37836,37849,37861,37874,37886,37898,37911,37923,37936,37948,37960,37973,37985,37998,38010,38022,38035,38047,38060,38072,38084,38097,38109,38122,38134,38146,38159,38171,38184,38196,38208,38221,38233,38246,38258,38270,38283,38295,38307,38320,38332,38345,38357,38369,38382,38394,38407,38419,38431,38444,38456,38468,38481,38493,38506,38518,38530,38543,38555,38567,38580,38592,38604,38617,38629,38642,38654,38666,38679,38691,38703,38716,38728,38740,38753,38765,38778,38790,38802,38815,38827,38839,38852,38864,38876,38889,38901,38913,38926,38938,38950,38963,38975,38987,39000,39012,39024,39037,39049,39061,39074,39086,39098,39111,39123,39135,39148,39160,39172,39185,39197,39209,39222,39234,39246,39259,39271,39283,39296,39308,39320,39332,39345,39357,39369,39382,39394,39406,39419,39431,39443,39456,39468,39480,39492,39505,39517,39529,39542,39554,39566,39579,39591,39603,39615,39628,39640,39652,39665,39677,39689,39701,39714,39726,39738,39750,39763,39775,39787,39800,39812,39824,39836,39849,39861,39873,39885,39898,39910,39922,39935,39947,39959,39971,39984,39996,40008,40020,40033,40045,40057,40069,40082,40094,40106,40118,40131,40143,40155,40167,40180,40192,40204,40216,40229,40241,40253,40265,40277,40290,40302,40314,40326,40339,40351,40363,40375,40387,40400,40412,40424,40436,40449,40461,40473,40485,40497,40510,40522,40534,40546,40558,40571,40583,40595,40607,40619,40632,40644,40656,40668,40680,40693,40705,40717,40729,40741,40754,40766,40778,40790,40802,40815,40827,40839,40851,40863,40875,40888,40900,40912,40924,40936,40948,40961,40973,40985,40997,41009,41021,41034,41046,41058,41070,41082,41094,41107,41119,41131,41143,41155,41167,41179,41192,41204,41216,41228,41240,41252,41264,41277,41289,41301,41313,41325,41337,41349,41361,41374,41386,41398,41410,41422,41434,41446,41458,41471,41483,41495,41507,41519,41531,41543,41555,41567,41580,41592,41604,41616,41628,41640,41652,41664,41676,41688,41700,41713,41725,41737,41749,41761,41773,41785,41797,41809,41821,41833,41845,41858,41870,41882,41894,41906,41918,41930,41942,41954,41966,41978,41990,42002,42014,42026,42038,42051,42063,42075,42087,42099,42111,42123,42135,42147,42159,42171,42183,42195,42207,42219,42231,42243,42255,42267,42279,42291,42303,42315,42327,42339,42351,42363,42375,42387,42399,42411,42423,42435,42447,42459,42471,42483,42495,42507,42519,42531,42543,42555,42567,42579,42591,42603,42615,42627,42639,42651,42663,42675,42687,42699,42711,42723,42735,42747,42759,42771,42783,42795,42807,42819,42831,42843,42855,42867,42879,42891,42903,42915,42927,42938,42950,42962,42974,42986,42998,43010,43022,43034,43046,43058,43070,43082,43094,43106,43117,43129,43141,43153,43165,43177,43189,43201,43213,43225,43237,43249,43260,43272,43284,43296,43308,43320,43332,43344,43356,43368,43379,43391,43403,43415,43427,43439,43451,43463,43474,43486,43498,43510,43522,43534,43546,43558,43569,43581,43593,43605,43617,43629,43641,43652,43664,43676,43688,43700,43712,43724,43735,43747,43759,43771,43783,43795,43806,43818,43830,43842,43854,43866,43877,43889,43901,43913,43925,43936,43948,43960,43972,43984,43995,44007,44019,44031,44043,44054,44066,44078,44090,44102,44113,44125,44137,44149,44161,44172,44184,44196,44208,44219,44231,44243,44255,44267,44278,44290,44302,44314,44325,44337,44349,44361,44372,44384,44396,44408,44419,44431,44443,44455,44466,44478,44490,44502,44513,44525,44537,44548,44560,44572,44584,44595,44607,44619,44630,44642,44654,44666,44677,44689,44701,44712,44724,44736,44748,44759,44771,44783,44794,44806,44818,44829,44841,44853,44864,44876,44888,44899,44911,44923,44934,44946,44958,44969,44981,44993,45004,45016,45028,45039,45051,45063,45074,45086,45098,45109,45121,45133,45144,45156,45167,45179,45191,45202,45214,45226,45237,45249,45260,45272,45284,45295,45307,45318,45330,45342,45353,45365,45377,45388,45400,45411,45423,45434,45446,45458,45469,45481,45492,45504,45516,45527,45539,45550,45562,45573,45585,45597,45608,45620,45631,45643,45654,45666,45677,45689,45701,45712,45724,45735,45747,45758,45770,45781,45793,45804,45816,45827,45839,45850,45862,45874,45885,45897,45908,45920,45931,45943,45954,45966,45977,45989,46000,46012,46023,46035,46046,46058,46069,46080,46092,46103,46115,46126,46138,46149,46161,46172,46184,46195,46207,46218,46230,46241,46253,46264,46275,46287,46298,46310,46321,46333,46344,46355,46367,46378,46390,46401,46413,46424,46435,46447,46458,46470,46481,46493,46504,46515,46527,46538,46550,46561,46572,46584,46595,46607,46618,46629,46641,46652,46663,46675,46686,46698,46709,46720,46732,46743,46754,46766,46777,46789,46800,46811,46823,46834,46845,46857,46868,46879,46891,46902,46913,46925,46936,46947,46959,46970,46981,46993,47004,47015,47027,47038,47049,47061,47072,47083,47094,47106,47117,47128,47140,47151,47162,47174,47185,47196,47207,47219,47230,47241,47252,47264,47275,47286,47298,47309,47320,47331,47343,47354,47365,47376,47388,47399,47410,47421,47433,47444,47455,47466,47477,47489,47500,47511,47522,47534,47545,47556,47567,47578,47590,47601,47612,47623,47634,47646,47657,47668,47679,47690,47702,47713,47724,47735,47746,47757,47769,47780,47791,47802,47813,47824,47836,47847,47858,47869,47880,47891,47903,47914,47925,47936,47947,47958,47969,47981,47992,48003,48014,48025,48036,48047,48058,48069,48081,48092,48103,48114,48125,48136,48147,48158,48169,48181,48192,48203,48214,48225,48236,48247,48258,48269,48280,48291,48302,48313,48324,48336,48347,48358,48369,48380,48391,48402,48413,48424,48435,48446,48457,48468,48479,48490,48501,48512,48523,48534,48545,48556,48567,48578,48589,48600,48611,48622,48633,48644,48655,48666,48677,48688,48699,48710,48721,48732,48743,48754,48765,48776,48787,48798,48809,48820,48831,48842,48853,48864,48875,48885,48896,48907,48918,48929,48940,48951,48962,48973,48984,48995,49006,49017,49028,49038,49049,49060,49071,49082,49093,49104,49115,49126,49136,49147,49158,49169,49180,49191,49202,49213,49223,49234,49245,49256,49267,49278,49289,49300,49310,49321,49332,49343,49354,49365,49375,49386,49397,49408,49419,49430,49440,49451,49462,49473,49484,49494,49505,49516,49527,49538,49548,49559,49570,49581,49592,49602,49613,49624,49635,49645,49656,49667,49678,49688,49699,49710,49721,49732,49742,49753,49764,49774,49785,49796,49807,49817,49828,49839,49850,49860,49871,49882,49892,49903,49914,49925,49935,49946,49957,49967,49978,49989,50000,50010,50021,50032,50042,50053,50064,50074,50085,50096,50106,50117,50128,50138,50149,50160,50170,50181,50191,50202,50213,50223,50234,50245,50255,50266,50277,50287,50298,50308,50319,50330,50340,50351,50361,50372,50383,50393,50404,50414,50425,50436,50446,50457,50467,50478,50488,50499,50510,50520,50531,50541,50552,50562,50573,50583,50594,50605,50615,50626,50636,50647,50657,50668,50678,50689,50699,50710,50720,50731,50741,50752,50762,50773,50783,50794,50804,50815,50825,50836,50846,50857,50867,50878,50888,50899,50909,50920,50930,50941,50951,50961,50972,50982,50993,51003,51014,51024,51035,51045,51055,51066,51076,51087,51097,51107,51118,51128,51139,51149,51160,51170,51180,51191,51201,51211,51222,51232,51243,51253,51263,51274,51284,51294,51305,51315,51326,51336,51346,51357,51367,51377,51388,51398,51408,51419,51429,51439,51450,51460,51470,51481,51491,51501,51512,51522,51532,51542,51553,51563,51573,51584,51594,51604,51614,51625,51635,51645,51656,51666,51676,51686,51697,51707,51717,51727,51738,51748,51758,51768,51779,51789,51799,51809,51819,51830,51840,51850,51860,51871,51881,51891,51901,51911,51922,51932,51942,51952,51962,51973,51983,51993,52003,52013,52023,52034,52044,52054,52064,52074,52084,52094,52105,52115,52125,52135,52145,52155,52165,52176,52186,52196,52206,52216,52226,52236,52246,52256,52267,52277,52287,52297,52307,52317,52327,52337,52347,52357,52367,52378,52388,52398,52408,52418,52428,52438,52448,52458,52468,52478,52488,52498,52508,52518,52528,52538,52548,52558,52568,52578,52588,52598,52608,52618,52628,52638,52648,52658,52668,52678,52688,52698,52708,52718,52728,52738,52748,52758,52768,52778,52788,52798,52808,52818,52828,52838,52847,52857,52867,52877,52887,52897,52907,52917,52927,52937,52947,52956,52966,52976,52986,52996,53006,53016,53026,53036,53045,53055,53065,53075,53085,53095,53105,53114,53124,53134,53144,53154,53164,53174,53183,53193,53203,53213,53223,53232,53242,53252,53262,53272,53281,53291,53301,53311,53321,53330,53340,53350,53360,53370,53379,53389,53399,53409,53418,53428,53438,53448,53457,53467,53477,53487,53496,53506,53516,53526,53535,53545,53555,53564,53574,53584,53593,53603,53613,53623,53632,53642,53652,53661,53671,53681,53690,53700,53710,53719,53729,53739,53748,53758,53768,53777,53787,53797,53806,53816,53825,53835,53845,53854,53864,53874,53883,53893,53902,53912,53922,53931,53941,53950,53960,53970,53979,53989,53998,54008,54017,54027,54036,54046,54056,54065,54075,54084,54094,54103,54113,54122,54132,54141,54151,54160,54170,54180,54189,54199,54208,54218,54227,54237,54246,54256,54265,54274,54284,54293,54303,54312,54322,54331,54341,54350,54360,54369,54379,54388,54397,54407,54416,54426,54435,54445,54454,54463,54473,54482,54492,54501,54511,54520,54529,54539,54548,54557,54567,54576,54586,54595,54604,54614,54623,54632,54642,54651,54661,54670,54679,54689,54698,54707,54717,54726,54735,54745,54754,54763,54772,54782,54791,54800,54810,54819,54828,54838,54847,54856,54865,54875,54884,54893,54903,54912,54921,54930,54940,54949,54958,54967,54977,54986,54995,55004,55013,55023,55032,55041,55050,55060,55069,55078,55087,55096,55106,55115,55124,55133,55142,55151,55161,55170,55179,55188,55197,55206,55216,55225,55234,55243,55252,55261,55271,55280,55289,55298,55307,55316,55325,55334,55343,55353,55362,55371,55380,55389,55398,55407,55416,55425,55434,55443,55453,55462,55471,55480,55489,55498,55507,55516,55525,55534,55543,55552,55561,55570,55579,55588,55597,55606,55615,55624,55633,55642,55651,55660,55669,55678,55687,55696,55705,55714,55723,55732,55741,55750,55759,55768,55777,55786,55795,55804,55813,55821,55830,55839,55848,55857,55866,55875,55884,55893,55902,55911,55919,55928,55937,55946,55955,55964,55973,55982,55991,55999,56008,56017,56026,56035,56044,56052,56061,56070,56079,56088,56097,56105,56114,56123,56132,56141,56150,56158,56167,56176,56185,56194,56202,56211,56220,56229,56237,56246,56255,56264,56272,56281,56290,56299,56307,56316,56325,56334,56342,56351,56360,56369,56377,56386,56395,56403,56412,56421,56429,56438,56447,56456,56464,56473,56482,56490,56499,56508,56516,56525,56534,56542,56551,56559,56568,56577,56585,56594,56603,56611,56620,56628,56637,56646,56654,56663,56671,56680,56689,56697,56706,56714,56723,56732,56740,56749,56757,56766,56774,56783,56791,56800,56809,56817,56826,56834,56843,56851,56860,56868,56877,56885,56894,56902,56911,56919,56928,56936,56945,56953,56962,56970,56979,56987,56996,57004,57012,57021,57029,57038,57046,57055,57063,57072,57080,57088,57097,57105,57114,57122,57130,57139,57147,57156,57164,57172,57181,57189,57198,57206,57214,57223,57231,57239,57248,57256,57264,57273,57281,57289,57298,57306,57314,57323,57331,57339,57348,57356,57364,57373,57381,57389,57398,57406,57414,57422,57431,57439,57447,57455,57464,57472,57480,57488,57497,57505,57513,57521,57530,57538,57546,57554,57563,57571,57579,57587,57595,57604,57612,57620,57628,57636,57645,57653,57661,57669,57677,57685,57694,57702,57710,57718,57726,57734,57742,57751,57759,57767,57775,57783,57791,57799,57807,57815,57824,57832,57840,57848,57856,57864,57872,57880,57888,57896,57904,57912,57920,57929,57937,57945,57953,57961,57969,57977,57985,57993,58001,58009,58017,58025,58033,58041,58049,58057,58065,58073,58081,58089,58097,58105,58113,58121,58129,58137,58144,58152,58160,58168,58176,58184,58192,58200,58208,58216,58224,58232,58240,58248,58255,58263,58271,58279,58287,58295,58303,58311,58318,58326,58334,58342,58350,58358,58366,58373,58381,58389,58397,58405,58413,58420,58428,58436,58444,58452,58459,58467,58475,58483,58491,58498,58506,58514,58522,58530,58537,58545,58553,58561,58568,58576,58584,58592,58599,58607,58615,58622,58630,58638,58646,58653,58661,58669,58676,58684,58692,58699,58707,58715,58722,58730,58738,58745,58753,58761,58768,58776,58784,58791,58799,58807,58814,58822,58829,58837,58845,58852,58860,58867,58875,58883,58890,58898,58905,58913,58921,58928,58936,58943,58951,58958,58966,58973,58981,58989,58996,59004,59011,59019,59026,59034,59041,59049,59056,59064,59071,59079,59086,59094,59101,59109,59116,59124,59131,59139,59146,59153,59161,59168,59176,59183,59191,59198,59205,59213,59220,59228,59235,59243,59250,59257,59265,59272,59280,59287,59294,59302,59309,59316,59324,59331,59338,59346,59353,59361,59368,59375,59383,59390,59397,59404,59412,59419,59426,59434,59441,59448,59456,59463,59470,59477,59485,59492,59499,59507,59514,59521,59528,59536,59543,59550,59557,59565,59572,59579,59586,59593,59601,59608,59615,59622,59629,59637,59644,59651,59658,59665,59673,59680,59687,59694,59701,59708,59716,59723,59730,59737,59744,59751,59758,59765,59773,59780,59787,59794,59801,59808,59815,59822,59829,59836,59844,59851,59858,59865,59872,59879,59886,59893,59900,59907,59914,59921,59928,59935,59942,59949,59956,59963,59970,59977,59984,59991,59998,60005,60012,60019,60026,60033,60040,60047,60054,60061,60068,60075,60082,60089,60096,60103,60110,60117,60123,60130,60137,60144,60151,60158,60165,60172,60179,60186,60192,60199,60206,60213,60220,60227,60234,60240,60247,60254,60261,60268,60275,60281,60288,60295,60302,60309,60316,60322,60329,60336,60343,60350,60356,60363,60370,60377,60383,60390,60397,60404,60410,60417,60424,60431,60437,60444,60451,60458,60464,60471,60478,60484,60491,60498,60504,60511,60518,60525,60531,60538,60545,60551,60558,60565,60571,60578,60584,60591,60598,60604,60611,60618,60624,60631,60637,60644,60651,60657,60664,60670,60677,60684,60690,60697,60703,60710,60716,60723,60730,60736,60743,60749,60756,60762,60769,60775,60782,60788,60795,60801,60808,60814,60821,60827,60834,60840,60847,60853,60860,60866,60873,60879,60886,60892,60899,60905,60911,60918,60924,60931,60937,60944,60950,60956,60963,60969,60976,60982,60988,60995,61001,61007,61014,61020,61027,61033,61039,61046,61052,61058,61065,61071,61077,61084,61090,61096,61103,61109,61115,61121,61128,61134,61140,61147,61153,61159,61165,61172,61178,61184,61191,61197,61203,61209,61215,61222,61228,61234,61240,61247,61253,61259,61265,61271,61278,61284,61290,61296,61302,61309,61315,61321,61327,61333,61339,61346,61352,61358,61364,61370,61376,61382,61388,61395,61401,61407,61413,61419,61425,61431,61437,61443,61449,61455,61462,61468,61474,61480,61486,61492,61498,61504,61510,61516,61522,61528,61534,61540,61546,61552,61558,61564,61570,61576,61582,61588,61594,61600,61606,61612,61618,61624,61630,61636,61642,61648,61654,61659,61665,61671,61677,61683,61689,61695,61701,61707,61713,61719,61724,61730,61736,61742,61748,61754,61760,61765,61771,61777,61783,61789,61795,61801,61806,61812,61818,61824,61830,61835,61841,61847,61853,61859,61864,61870,61876,61882,61887,61893,61899,61905,61910,61916,61922,61928,61933,61939,61945,61951,61956,61962,61968,61973,61979,61985,61990,61996,62002,62007,62013,62019,62024,62030,62036,62041,62047,62053,62058,62064,62070,62075,62081,62086,62092,62098,62103,62109,62114,62120,62126,62131,62137,62142,62148,62153,62159,62165,62170,62176,62181,62187,62192,62198,62203,62209,62214,62220,62225,62231,62236,62242,62247,62253,62258,62264,62269,62275,62280,62286,62291,62297,62302,62307,62313,62318,62324,62329,62335,62340,62345,62351,62356,62362,62367,62372,62378,62383,62389,62394,62399,62405,62410,62415,62421,62426,62431,62437,62442,62447,62453,62458,62463,62469,62474,62479,62485,62490,62495,62500,62506,62511,62516,62521,62527,62532,62537,62542,62548,62553,62558,62563,62569,62574,62579,62584,62590,62595,62600,62605,62610,62616,62621,62626,62631,62636,62641,62647,62652,62657,62662,62667,62672,62677,62683,62688,62693,62698,62703,62708,62713,62718,62723,62729,62734,62739,62744,62749,62754,62759,62764,62769,62774,62779,62784,62789,62794,62799,62804,62809,62814,62819,62824,62829,62834,62839,62844,62849,62854,62859,62864,62869,62874,62879,62884,62889,62894,62899,62904,62909,62914,62919,62924,62928,62933,62938,62943,62948,62953,62958,62963,62968,62973,62977,62982,62987,62992,62997,63002,63006,63011,63016,63021,63026,63031,63035,63040,63045,63050,63055,63059,63064,63069,63074,63079,63083,63088,63093,63098,63102,63107,63112,63117,63121,63126,63131,63136,63140,63145,63150,63154,63159,63164,63168,63173,63178,63183,63187,63192,63197,63201,63206,63210,63215,63220,63224,63229,63234,63238,63243,63248,63252,63257,63261,63266,63271,63275,63280,63284,63289,63293,63298,63303,63307,63312,63316,63321,63325,63330,63334,63339,63343,63348,63352,63357,63361,63366,63370,63375,63379,63384,63388,63393,63397,63402,63406,63411,63415,63420,63424,63428,63433,63437,63442,63446,63451,63455,63459,63464,63468,63473,63477,63481,63486,63490,63494,63499,63503,63507,63512,63516,63521,63525,63529,63534,63538,63542,63546,63551,63555,63559,63564,63568,63572,63577,63581,63585,63589,63594,63598,63602,63606,63611,63615,63619,63623,63628,63632,63636,63640,63644,63649,63653,63657,63661,63665,63670,63674,63678,63682,63686,63690,63695,63699,63703,63707,63711,63715,63719,63723,63728,63732,63736,63740,63744,63748,63752,63756,63760,63764,63769,63773,63777,63781,63785,63789,63793,63797,63801,63805,63809,63813,63817,63821,63825,63829,63833,63837,63841,63845,63849,63853,63857,63861,63865,63869,63873,63877,63881,63885,63889,63892,63896,63900,63904,63908,63912,63916,63920,63924,63928,63932,63935,63939,63943,63947,63951,63955,63959,63962,63966,63970,63974,63978,63982,63985,63989,63993,63997,64001,64004,64008,64012,64016,64020,64023,64027,64031,64035,64038,64042,64046,64050,64053,64057,64061,64065,64068,64072,64076,64079,64083,64087,64091,64094,64098,64102,64105,64109,64113,64116,64120,64124,64127,64131,64134,64138,64142,64145,64149,64153,64156,64160,64163,64167,64171,64174,64178,64181,64185,64188,64192,64196,64199,64203,64206,64210,64213,64217,64220,64224,64227,64231,64234,64238,64241,64245,64248,64252,64255,64259,64262,64266,64269,64273,64276,64280,64283,64286,64290,64293,64297,64300,64304,64307,64310,64314,64317,64321,64324,64327,64331,64334,64337,64341,64344,64348,64351,64354,64358,64361,64364,64368,64371,64374,64378,64381,64384,64387,64391,64394,64397,64401,64404,64407,64410,64414,64417,64420,64423,64427,64430,64433,64436,64440,64443,64446,64449,64452,64456,64459,64462,64465,64468,64472,64475,64478,64481,64484,64487,64491,64494,64497,64500,64503,64506,64509,64512,64516,64519,64522,64525,64528,64531,64534,64537,64540,64543,64546,64549,64553,64556,64559,64562,64565,64568,64571,64574,64577,64580,64583,64586,64589,64592,64595,64598,64601,64604,64607,64610,64613,64616,64619,64622,64624,64627,64630,64633,64636,64639,64642,64645,64648,64651,64654,64657,64659,64662,64665,64668,64671,64674,64677,64679,64682,64685,64688,64691,64694,64697,64699,64702,64705,64708,64711,64713,64716,64719,64722,64725,64727,64730,64733,64736,64738,64741,64744,64747,64749,64752,64755,64757,64760,64763,64766,64768,64771,64774,64776,64779,64782,64784,64787,64790,64792,64795,64798,64800,64803,64806,64808,64811,64814,64816,64819,64821,64824,64827,64829,64832,64834,64837,64840,64842,64845,64847,64850,64852,64855,64857,64860,64863,64865,64868,64870,64873,64875,64878,64880,64883,64885,64888,64890,64893,64895,64898,64900,64902,64905,64907,64910,64912,64915,64917,64920,64922,64924,64927,64929,64932,64934,64936,64939,64941,64944,64946,64948,64951,64953,64955,64958,64960,64962,64965,64967,64969,64972,64974,64976,64979,64981,64983,64986,64988,64990,64992,64995,64997,64999,65001,65004,65006,65008,65010,65013,65015,65017,65019,65022,65024,65026,65028,65030,65033,65035,65037,65039,65041,65043,65046,65048,65050,65052,65054,65056,65059,65061,65063,65065,65067,65069,65071,65073,65075,65078,65080,65082,65084,65086,65088,65090,65092,65094,65096,65098,65100,65102,65104,65106,65108,65110,65112,65114,65116,65118,65120,65122,65124,65126,65128,65130,65132,65134,65136,65138,65140,65142,65144,65146,65148,65150,65152,65154,65155,65157,65159,65161,65163,65165,65167,65169,65171,65172,65174,65176,65178,65180,65182,65184,65185,65187,65189,65191,65193,65194,65196,65198,65200,65202,65203,65205,65207,65209,65211,65212,65214,65216,65218,65219,65221,65223,65224,65226,65228,65230,65231,65233,65235,65236,65238,65240,65241,65243,65245,65246,65248,65250,65251,65253,65255,65256,65258,65260,65261,65263,65264,65266,65268,65269,65271,65272,65274,65276,65277,65279,65280,65282,65283,65285,65287,65288,65290,65291,65293,65294,65296,65297,65299,65300,65302,65303,65305,65306,65308,65309,65311,65312,65314,65315,65316,65318,65319,65321,65322,65324,65325,65326,65328,65329,65331,65332,65333,65335,65336,65338,65339,65340,65342,65343,65344,65346,65347,65348,65350,65351,65352,65354,65355,65356,65358,65359,65360,65362,65363,65364,65365,65367,65368,65369,65370,65372,65373,65374,65375,65377,65378,65379,65380,65382,65383,65384,65385,65386,65388,65389,65390,65391,65392,65393,65395,65396,65397,65398,65399,65400,65402,65403,65404,65405,65406,65407,65408,65409,65410,65412,65413,65414,65415,65416,65417,65418,65419,65420,65421,65422,65423,65424,65425,65426,65427,65428,65429,65430,65431,65432,65433,65434,65435,65436,65437,65438,65439,65440,65441,65442,65443,65444,65445,65446,65447,65448,65448,65449,65450,65451,65452,65453,65454,65455,65456,65456,65457,65458,65459,65460,65461,65462,65462,65463,65464,65465,65466,65467,65467,65468,65469,65470,65471,65471,65472,65473,65474,65474,65475,65476,65477,65477,65478,65479,65480,65480,65481,65482,65482,65483,65484,65485,65485,65486,65487,65487,65488,65489,65489,65490,65491,65491,65492,65493,65493,65494,65494,65495,65496,65496,65497,65497,65498,65499,65499,65500,65500,65501,65502,65502,65503,65503,65504,65504,65505,65505,65506,65506,65507,65507,65508,65508,65509,65509,65510,65510,65511,65511,65512,65512,65513,65513,65514,65514,65515,65515,65515,65516,65516,65517,65517,65518,65518,65518,65519,65519,65519,65520,65520,65521,65521,65521,65522,65522,65522,65523,65523,65523,65524,65524,65524,65525,65525,65525,65526,65526,65526,65526,65527,65527,65527,65527,65528,65528,65528,65528,65529,65529,65529,65529,65530,65530,65530,65530,65530,65531,65531,65531,65531,65531,65532,65532,65532,65532,65532,65532,65532,65533,65533,65533,65533,65533,65533,65533,65533,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,
};

#define linear_8(x, y, w) \
  ((uint32_t) (x) * (255 - (w)) + (uint32_t) (y) * (w) >> 8)

// Linear-interpolation point retrieval from a wavetable
uint16_t wt_linear(uint16_t const *const wt, uint16_t const i)
{
  uint16_t const e1 = i >> WT_INTERP;
  uint16_t const e2 = min(WT_MASK, e1 + 1);
  uint16_t const w1 = i & ~(-1 << WT_INTERP);
  uint16_t const w2 = (1 << WT_INTERP) - w1;
  return (uint32_t) pgm_read_word_near(wt + e1) * w1
       + (uint32_t) pgm_read_word_near(wt + e2) * w2 >> WT_INTERP;
}

uint16_t sine(uint16_t const t)
{
  uint16_t s = wt_linear(sine_qtable, (t & 0x4000 ? ~t & 0x3fff
                                                  :  t & 0x3fff) << 2);
  return t & 0x8000 ? 0xffff - s : s;
}

#define cosine(t) sine((t) + 16384)

#endif

#define STACK_SIZE   4
#define PROGRAM_SIZE 32

char const *const commands = " +*-^vqs:./abcdefO01234567";
uint8_t const command_len  = strlen(commands);

typedef uint16_t stack_value;

struct stack
{
  stack_value values[STACK_SIZE];
  uint8_t     top;

  stack_value peek() { return top > 0 ? values[top - 1] : 0; }
  stack_value pop()  { return top > 0 ? values[--top]   : 0; }
  void        push(stack_value const v)
    { if (top < STACK_SIZE) values[top++] = v; }

  void clear()
  {
    top = 0;
  }

  void init1(stack_value const v)
  {
    clear();
    push(v);
  }
};

struct program
{
  char code[PROGRAM_SIZE];

  void set(char const *const s)
  {
    for (int i = 0; i < PROGRAM_SIZE; ++i) code[i] = 0;
    for (int i = 0; s[i]; ++i)
    {
      char const *const k = strchr(commands, s[i]);
      code[i] = k >= commands && k < commands + command_len ? k - commands : 0;
    }
  }
};

void interpret(struct program const *const p, struct stack *const s)
{
  char c;

  stack_value v1;
  stack_value v2;

  for (int i = 0; i < PROGRAM_SIZE; ++i)
  {
    repeat_16( emit(); )
    switch (c = commands[p->code[i]])
    {
      case 'O': s->push(0); break;
      case '0': case '1': case '2': case '3':
      case '4': case '5': case '6': case '7':
        s->push(s->pop() >> 3 | c - '0' << 11);
        break;

      case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
        s->push(pots[c - 'a'].val() << 2);
        break;

      case '^': s->push(s->pop() << 4);                                 break;
      case 'v': s->push(s->pop() >> 4);                                 break;

      case '+': s->push(s->pop() + s->pop());                           break;
      case '-': s->push(-s->pop());                                     break;
      case '*': s->push((int32_t) s->pop() * (int32_t) s->pop() >> 12); break;
      case 'q': s->push(-(s->pop() > s->pop()));                        break;
      case 's': s->push(sine((uint32_t) s->pop() * 16) >> 4);           break;
      case ':': s->push(s->peek());                                     break;
      case '.': s->pop();                                               break;
      case '/': v1 = s->pop(); v2 = s->pop(); s->push(v1); s->push(v2); break;
    }
  }
}

#endif
#ifndef REPEAT_H
#define REPEAT_H

#define repeat_2(x) x x
#define repeat_4(x) repeat_2(repeat_2(x))
#define repeat_8(x) repeat_4(repeat_2(x))
#define repeat_16(x) repeat_4(repeat_4(x))
#define repeat_32(x) repeat_8(repeat_4(x))
#define repeat_64(x) repeat_8(repeat_8(x))

#endif

program p;

// Progressively evaluate to get fast approximate results
void recompile()
{
  stack s;
  uint16_t a, b, la, lb;

#define emit_a(i, va, vb)                                       \
  do {                                                          \
    a_buf[i] = ((va) & 0x0f00) >> 4 | (vb & 0x0f00) >> 8;       \
  } while (0)

#define emit_c(i, va, vb)                                       \
  do {                                                          \
    c_buf[i] = (va) & 0x00f0 | (vb & 0x00f0) >> 4;              \
  } while (0)

#define emit_l(i, va, vb)                                       \
  do {                                                          \
    l_buf[i] = ((va) & 0x000f) << 4 | vb & 0x000f;              \
  } while (0)

#define recompile_one(i)                                        \
  do {                                                          \
    s.init1((i) << 1);                                          \
    interpret(&p, &s);                                          \
    la = a;                                                     \
    lb = b;                                                     \
    a = s.pop();                                                \
    b = s.pop();                                                \
    a = (a >> 1) + (a >> 3);                                    \
    b = (b >> 1) + (b >> 3);                                    \
    emit_a(i, a, b);                                            \
    emit_c(i, a, b);                                            \
    emit_l(i, a, b);                                            \
  } while (0)

#define approx_stage(bits, ebits)                               \
  do {                                                          \
    recompile_one(0);                                           \
    for (int i = 1 << bits;                                     \
         i < BUF_SIZE && !any_pot_delta; i += 1 << bits)        \
    {                                                           \
      check_pot();                                              \
      recompile_one(i);                                         \
      for (int j = 1 << ebits; j < 1 << bits; j += 1 << ebits)  \
      {                                                         \
        uint8_t  w  = j << 8 - bits;                            \
        uint16_t va = linear_8(la, a, w);                       \
        uint16_t vb = linear_8(lb, b, w);                       \
        emit_a(i + j - (1 << bits), va, vb);                    \
        emit_c(i + j - (1 << bits), va, vb);                    \
        emit_l(i + j - (1 << bits), va, vb);                    \
      }                                                         \
    }                                                           \
    emit_mask = -1 << ebits;                                    \
  } while (0)

  emit_mask = -1 << 5;
  approx_stage(6, 3);
  approx_stage(3, 1);

  for (int i = 0; i < BUF_SIZE && !any_pot_delta; ++i)
  {
    check_pot();
    recompile_one(i);
  }

#undef recompile_one
}
#ifndef EMIT_H
#define EMIT_H

#define BUF_SIZE 2048
uint8_t a_buf[BUF_SIZE];
uint8_t c_buf[BUF_SIZE];
uint8_t l_buf[BUF_SIZE];

uint16_t emit_mask = 0xffff;

//*
// Original (less expensive) version:
#define emit()                                          \
  do {                                                  \
    uint16_t EMIT_t = TCNT3 & emit_mask;                \
    uint8_t  EMIT_a = a_buf[EMIT_t];                    \
    uint8_t  EMIT_c = c_buf[EMIT_t];                    \
    uint8_t  EMIT_l = l_buf[EMIT_t];                    \
    PORTA = EMIT_a;                                     \
    PORTC = EMIT_c;                                     \
    PORTL = EMIT_l;                                     \
  } while (0)
// */

/*
// More expensive version to test:
#define emit()                                          \
  do {                                                  \
    uint16_t EMIT_t = TCNT3 & emit_mask;                \
    uint8_t  EMIT_ah = a_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_al = a_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_ch = c_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_cl = c_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_lh = l_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_ll = l_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_a = EMIT_ah << 4 | EMIT_al;           \
    uint8_t  EMIT_c = EMIT_ch << 4 | EMIT_cl;           \
    uint8_t  EMIT_l = EMIT_lh << 4 | EMIT_ll;           \
    PORTA = EMIT_a;                                     \
    PORTC = EMIT_c;                                     \
    PORTL = EMIT_l;                                     \
  } while (0)
// */

#endif
#ifndef INTERPRETER_H
#define INTERPRETER_H

#ifndef EMIT_H
#define EMIT_H

#define BUF_SIZE 2048
uint8_t a_buf[BUF_SIZE];
uint8_t c_buf[BUF_SIZE];
uint8_t l_buf[BUF_SIZE];

uint16_t emit_mask = 0xffff;

//*
// Original (less expensive) version:
#define emit()                                          \
  do {                                                  \
    uint16_t EMIT_t = TCNT3 & emit_mask;                \
    uint8_t  EMIT_a = a_buf[EMIT_t];                    \
    uint8_t  EMIT_c = c_buf[EMIT_t];                    \
    uint8_t  EMIT_l = l_buf[EMIT_t];                    \
    PORTA = EMIT_a;                                     \
    PORTC = EMIT_c;                                     \
    PORTL = EMIT_l;                                     \
  } while (0)
// */

/*
// More expensive version to test:
#define emit()                                          \
  do {                                                  \
    uint16_t EMIT_t = TCNT3 & emit_mask;                \
    uint8_t  EMIT_ah = a_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_al = a_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_ch = c_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_cl = c_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_lh = l_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_ll = l_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_a = EMIT_ah << 4 | EMIT_al;           \
    uint8_t  EMIT_c = EMIT_ch << 4 | EMIT_cl;           \
    uint8_t  EMIT_l = EMIT_lh << 4 | EMIT_ll;           \
    PORTA = EMIT_a;                                     \
    PORTC = EMIT_c;                                     \
    PORTL = EMIT_l;                                     \
  } while (0)
// */

#endif
#ifndef REPEAT_H
#define REPEAT_H

#define repeat_2(x) x x
#define repeat_4(x) repeat_2(repeat_2(x))
#define repeat_8(x) repeat_4(repeat_2(x))
#define repeat_16(x) repeat_4(repeat_4(x))
#define repeat_32(x) repeat_8(repeat_4(x))
#define repeat_64(x) repeat_8(repeat_8(x))

#endif
#ifndef WAVETABLES_H
#define WAVETABLES_H

#include <avr/pgmspace.h>



#define WT_BITS 12
#define WT_SIZE 4096


#define WT_INTERP (16 - WT_BITS)
#define WT_MASK   (WT_SIZE - 1)

// Quarter-turn sine table, so we mirror and negate accordingly
uint16_t const sine_qtable[] PROGMEM = {
32768,32780,32793,32805,32818,32830,32843,32855,32868,32881,32893,32906,32918,32931,32943,32956,32969,32981,32994,33006,33019,33031,33044,33057,33069,33082,33094,33107,33119,33132,33144,33157,33170,33182,33195,33207,33220,33232,33245,33258,33270,33283,33295,33308,33320,33333,33346,33358,33371,33383,33396,33408,33421,33433,33446,33459,33471,33484,33496,33509,33521,33534,33547,33559,33572,33584,33597,33609,33622,33634,33647,33660,33672,33685,33697,33710,33722,33735,33748,33760,33773,33785,33798,33810,33823,33835,33848,33861,33873,33886,33898,33911,33923,33936,33948,33961,33974,33986,33999,34011,34024,34036,34049,34061,34074,34087,34099,34112,34124,34137,34149,34162,34174,34187,34200,34212,34225,34237,34250,34262,34275,34287,34300,34313,34325,34338,34350,34363,34375,34388,34400,34413,34426,34438,34451,34463,34476,34488,34501,34513,34526,34538,34551,34564,34576,34589,34601,34614,34626,34639,34651,34664,34676,34689,34702,34714,34727,34739,34752,34764,34777,34789,34802,34814,34827,34840,34852,34865,34877,34890,34902,34915,34927,34940,34952,34965,34977,34990,35003,35015,35028,35040,35053,35065,35078,35090,35103,35115,35128,35140,35153,35165,35178,35191,35203,35216,35228,35241,35253,35266,35278,35291,35303,35316,35328,35341,35353,35366,35378,35391,35404,35416,35429,35441,35454,35466,35479,35491,35504,35516,35529,35541,35554,35566,35579,35591,35604,35616,35629,35641,35654,35666,35679,35691,35704,35717,35729,35742,35754,35767,35779,35792,35804,35817,35829,35842,35854,35867,35879,35892,35904,35917,35929,35942,35954,35967,35979,35992,36004,36017,36029,36042,36054,36067,36079,36092,36104,36117,36129,36142,36154,36167,36179,36192,36204,36217,36229,36242,36254,36267,36279,36292,36304,36317,36329,36342,36354,36367,36379,36392,36404,36417,36429,36442,36454,36467,36479,36492,36504,36517,36529,36541,36554,36566,36579,36591,36604,36616,36629,36641,36654,36666,36679,36691,36704,36716,36729,36741,36754,36766,36779,36791,36803,36816,36828,36841,36853,36866,36878,36891,36903,36916,36928,36941,36953,36966,36978,36990,37003,37015,37028,37040,37053,37065,37078,37090,37103,37115,37127,37140,37152,37165,37177,37190,37202,37215,37227,37240,37252,37264,37277,37289,37302,37314,37327,37339,37352,37364,37376,37389,37401,37414,37426,37439,37451,37464,37476,37488,37501,37513,37526,37538,37551,37563,37575,37588,37600,37613,37625,37638,37650,37662,37675,37687,37700,37712,37725,37737,37749,37762,37774,37787,37799,37811,37824,37836,37849,37861,37874,37886,37898,37911,37923,37936,37948,37960,37973,37985,37998,38010,38022,38035,38047,38060,38072,38084,38097,38109,38122,38134,38146,38159,38171,38184,38196,38208,38221,38233,38246,38258,38270,38283,38295,38307,38320,38332,38345,38357,38369,38382,38394,38407,38419,38431,38444,38456,38468,38481,38493,38506,38518,38530,38543,38555,38567,38580,38592,38604,38617,38629,38642,38654,38666,38679,38691,38703,38716,38728,38740,38753,38765,38778,38790,38802,38815,38827,38839,38852,38864,38876,38889,38901,38913,38926,38938,38950,38963,38975,38987,39000,39012,39024,39037,39049,39061,39074,39086,39098,39111,39123,39135,39148,39160,39172,39185,39197,39209,39222,39234,39246,39259,39271,39283,39296,39308,39320,39332,39345,39357,39369,39382,39394,39406,39419,39431,39443,39456,39468,39480,39492,39505,39517,39529,39542,39554,39566,39579,39591,39603,39615,39628,39640,39652,39665,39677,39689,39701,39714,39726,39738,39750,39763,39775,39787,39800,39812,39824,39836,39849,39861,39873,39885,39898,39910,39922,39935,39947,39959,39971,39984,39996,40008,40020,40033,40045,40057,40069,40082,40094,40106,40118,40131,40143,40155,40167,40180,40192,40204,40216,40229,40241,40253,40265,40277,40290,40302,40314,40326,40339,40351,40363,40375,40387,40400,40412,40424,40436,40449,40461,40473,40485,40497,40510,40522,40534,40546,40558,40571,40583,40595,40607,40619,40632,40644,40656,40668,40680,40693,40705,40717,40729,40741,40754,40766,40778,40790,40802,40815,40827,40839,40851,40863,40875,40888,40900,40912,40924,40936,40948,40961,40973,40985,40997,41009,41021,41034,41046,41058,41070,41082,41094,41107,41119,41131,41143,41155,41167,41179,41192,41204,41216,41228,41240,41252,41264,41277,41289,41301,41313,41325,41337,41349,41361,41374,41386,41398,41410,41422,41434,41446,41458,41471,41483,41495,41507,41519,41531,41543,41555,41567,41580,41592,41604,41616,41628,41640,41652,41664,41676,41688,41700,41713,41725,41737,41749,41761,41773,41785,41797,41809,41821,41833,41845,41858,41870,41882,41894,41906,41918,41930,41942,41954,41966,41978,41990,42002,42014,42026,42038,42051,42063,42075,42087,42099,42111,42123,42135,42147,42159,42171,42183,42195,42207,42219,42231,42243,42255,42267,42279,42291,42303,42315,42327,42339,42351,42363,42375,42387,42399,42411,42423,42435,42447,42459,42471,42483,42495,42507,42519,42531,42543,42555,42567,42579,42591,42603,42615,42627,42639,42651,42663,42675,42687,42699,42711,42723,42735,42747,42759,42771,42783,42795,42807,42819,42831,42843,42855,42867,42879,42891,42903,42915,42927,42938,42950,42962,42974,42986,42998,43010,43022,43034,43046,43058,43070,43082,43094,43106,43117,43129,43141,43153,43165,43177,43189,43201,43213,43225,43237,43249,43260,43272,43284,43296,43308,43320,43332,43344,43356,43368,43379,43391,43403,43415,43427,43439,43451,43463,43474,43486,43498,43510,43522,43534,43546,43558,43569,43581,43593,43605,43617,43629,43641,43652,43664,43676,43688,43700,43712,43724,43735,43747,43759,43771,43783,43795,43806,43818,43830,43842,43854,43866,43877,43889,43901,43913,43925,43936,43948,43960,43972,43984,43995,44007,44019,44031,44043,44054,44066,44078,44090,44102,44113,44125,44137,44149,44161,44172,44184,44196,44208,44219,44231,44243,44255,44267,44278,44290,44302,44314,44325,44337,44349,44361,44372,44384,44396,44408,44419,44431,44443,44455,44466,44478,44490,44502,44513,44525,44537,44548,44560,44572,44584,44595,44607,44619,44630,44642,44654,44666,44677,44689,44701,44712,44724,44736,44748,44759,44771,44783,44794,44806,44818,44829,44841,44853,44864,44876,44888,44899,44911,44923,44934,44946,44958,44969,44981,44993,45004,45016,45028,45039,45051,45063,45074,45086,45098,45109,45121,45133,45144,45156,45167,45179,45191,45202,45214,45226,45237,45249,45260,45272,45284,45295,45307,45318,45330,45342,45353,45365,45377,45388,45400,45411,45423,45434,45446,45458,45469,45481,45492,45504,45516,45527,45539,45550,45562,45573,45585,45597,45608,45620,45631,45643,45654,45666,45677,45689,45701,45712,45724,45735,45747,45758,45770,45781,45793,45804,45816,45827,45839,45850,45862,45874,45885,45897,45908,45920,45931,45943,45954,45966,45977,45989,46000,46012,46023,46035,46046,46058,46069,46080,46092,46103,46115,46126,46138,46149,46161,46172,46184,46195,46207,46218,46230,46241,46253,46264,46275,46287,46298,46310,46321,46333,46344,46355,46367,46378,46390,46401,46413,46424,46435,46447,46458,46470,46481,46493,46504,46515,46527,46538,46550,46561,46572,46584,46595,46607,46618,46629,46641,46652,46663,46675,46686,46698,46709,46720,46732,46743,46754,46766,46777,46789,46800,46811,46823,46834,46845,46857,46868,46879,46891,46902,46913,46925,46936,46947,46959,46970,46981,46993,47004,47015,47027,47038,47049,47061,47072,47083,47094,47106,47117,47128,47140,47151,47162,47174,47185,47196,47207,47219,47230,47241,47252,47264,47275,47286,47298,47309,47320,47331,47343,47354,47365,47376,47388,47399,47410,47421,47433,47444,47455,47466,47477,47489,47500,47511,47522,47534,47545,47556,47567,47578,47590,47601,47612,47623,47634,47646,47657,47668,47679,47690,47702,47713,47724,47735,47746,47757,47769,47780,47791,47802,47813,47824,47836,47847,47858,47869,47880,47891,47903,47914,47925,47936,47947,47958,47969,47981,47992,48003,48014,48025,48036,48047,48058,48069,48081,48092,48103,48114,48125,48136,48147,48158,48169,48181,48192,48203,48214,48225,48236,48247,48258,48269,48280,48291,48302,48313,48324,48336,48347,48358,48369,48380,48391,48402,48413,48424,48435,48446,48457,48468,48479,48490,48501,48512,48523,48534,48545,48556,48567,48578,48589,48600,48611,48622,48633,48644,48655,48666,48677,48688,48699,48710,48721,48732,48743,48754,48765,48776,48787,48798,48809,48820,48831,48842,48853,48864,48875,48885,48896,48907,48918,48929,48940,48951,48962,48973,48984,48995,49006,49017,49028,49038,49049,49060,49071,49082,49093,49104,49115,49126,49136,49147,49158,49169,49180,49191,49202,49213,49223,49234,49245,49256,49267,49278,49289,49300,49310,49321,49332,49343,49354,49365,49375,49386,49397,49408,49419,49430,49440,49451,49462,49473,49484,49494,49505,49516,49527,49538,49548,49559,49570,49581,49592,49602,49613,49624,49635,49645,49656,49667,49678,49688,49699,49710,49721,49732,49742,49753,49764,49774,49785,49796,49807,49817,49828,49839,49850,49860,49871,49882,49892,49903,49914,49925,49935,49946,49957,49967,49978,49989,50000,50010,50021,50032,50042,50053,50064,50074,50085,50096,50106,50117,50128,50138,50149,50160,50170,50181,50191,50202,50213,50223,50234,50245,50255,50266,50277,50287,50298,50308,50319,50330,50340,50351,50361,50372,50383,50393,50404,50414,50425,50436,50446,50457,50467,50478,50488,50499,50510,50520,50531,50541,50552,50562,50573,50583,50594,50605,50615,50626,50636,50647,50657,50668,50678,50689,50699,50710,50720,50731,50741,50752,50762,50773,50783,50794,50804,50815,50825,50836,50846,50857,50867,50878,50888,50899,50909,50920,50930,50941,50951,50961,50972,50982,50993,51003,51014,51024,51035,51045,51055,51066,51076,51087,51097,51107,51118,51128,51139,51149,51160,51170,51180,51191,51201,51211,51222,51232,51243,51253,51263,51274,51284,51294,51305,51315,51326,51336,51346,51357,51367,51377,51388,51398,51408,51419,51429,51439,51450,51460,51470,51481,51491,51501,51512,51522,51532,51542,51553,51563,51573,51584,51594,51604,51614,51625,51635,51645,51656,51666,51676,51686,51697,51707,51717,51727,51738,51748,51758,51768,51779,51789,51799,51809,51819,51830,51840,51850,51860,51871,51881,51891,51901,51911,51922,51932,51942,51952,51962,51973,51983,51993,52003,52013,52023,52034,52044,52054,52064,52074,52084,52094,52105,52115,52125,52135,52145,52155,52165,52176,52186,52196,52206,52216,52226,52236,52246,52256,52267,52277,52287,52297,52307,52317,52327,52337,52347,52357,52367,52378,52388,52398,52408,52418,52428,52438,52448,52458,52468,52478,52488,52498,52508,52518,52528,52538,52548,52558,52568,52578,52588,52598,52608,52618,52628,52638,52648,52658,52668,52678,52688,52698,52708,52718,52728,52738,52748,52758,52768,52778,52788,52798,52808,52818,52828,52838,52847,52857,52867,52877,52887,52897,52907,52917,52927,52937,52947,52956,52966,52976,52986,52996,53006,53016,53026,53036,53045,53055,53065,53075,53085,53095,53105,53114,53124,53134,53144,53154,53164,53174,53183,53193,53203,53213,53223,53232,53242,53252,53262,53272,53281,53291,53301,53311,53321,53330,53340,53350,53360,53370,53379,53389,53399,53409,53418,53428,53438,53448,53457,53467,53477,53487,53496,53506,53516,53526,53535,53545,53555,53564,53574,53584,53593,53603,53613,53623,53632,53642,53652,53661,53671,53681,53690,53700,53710,53719,53729,53739,53748,53758,53768,53777,53787,53797,53806,53816,53825,53835,53845,53854,53864,53874,53883,53893,53902,53912,53922,53931,53941,53950,53960,53970,53979,53989,53998,54008,54017,54027,54036,54046,54056,54065,54075,54084,54094,54103,54113,54122,54132,54141,54151,54160,54170,54180,54189,54199,54208,54218,54227,54237,54246,54256,54265,54274,54284,54293,54303,54312,54322,54331,54341,54350,54360,54369,54379,54388,54397,54407,54416,54426,54435,54445,54454,54463,54473,54482,54492,54501,54511,54520,54529,54539,54548,54557,54567,54576,54586,54595,54604,54614,54623,54632,54642,54651,54661,54670,54679,54689,54698,54707,54717,54726,54735,54745,54754,54763,54772,54782,54791,54800,54810,54819,54828,54838,54847,54856,54865,54875,54884,54893,54903,54912,54921,54930,54940,54949,54958,54967,54977,54986,54995,55004,55013,55023,55032,55041,55050,55060,55069,55078,55087,55096,55106,55115,55124,55133,55142,55151,55161,55170,55179,55188,55197,55206,55216,55225,55234,55243,55252,55261,55271,55280,55289,55298,55307,55316,55325,55334,55343,55353,55362,55371,55380,55389,55398,55407,55416,55425,55434,55443,55453,55462,55471,55480,55489,55498,55507,55516,55525,55534,55543,55552,55561,55570,55579,55588,55597,55606,55615,55624,55633,55642,55651,55660,55669,55678,55687,55696,55705,55714,55723,55732,55741,55750,55759,55768,55777,55786,55795,55804,55813,55821,55830,55839,55848,55857,55866,55875,55884,55893,55902,55911,55919,55928,55937,55946,55955,55964,55973,55982,55991,55999,56008,56017,56026,56035,56044,56052,56061,56070,56079,56088,56097,56105,56114,56123,56132,56141,56150,56158,56167,56176,56185,56194,56202,56211,56220,56229,56237,56246,56255,56264,56272,56281,56290,56299,56307,56316,56325,56334,56342,56351,56360,56369,56377,56386,56395,56403,56412,56421,56429,56438,56447,56456,56464,56473,56482,56490,56499,56508,56516,56525,56534,56542,56551,56559,56568,56577,56585,56594,56603,56611,56620,56628,56637,56646,56654,56663,56671,56680,56689,56697,56706,56714,56723,56732,56740,56749,56757,56766,56774,56783,56791,56800,56809,56817,56826,56834,56843,56851,56860,56868,56877,56885,56894,56902,56911,56919,56928,56936,56945,56953,56962,56970,56979,56987,56996,57004,57012,57021,57029,57038,57046,57055,57063,57072,57080,57088,57097,57105,57114,57122,57130,57139,57147,57156,57164,57172,57181,57189,57198,57206,57214,57223,57231,57239,57248,57256,57264,57273,57281,57289,57298,57306,57314,57323,57331,57339,57348,57356,57364,57373,57381,57389,57398,57406,57414,57422,57431,57439,57447,57455,57464,57472,57480,57488,57497,57505,57513,57521,57530,57538,57546,57554,57563,57571,57579,57587,57595,57604,57612,57620,57628,57636,57645,57653,57661,57669,57677,57685,57694,57702,57710,57718,57726,57734,57742,57751,57759,57767,57775,57783,57791,57799,57807,57815,57824,57832,57840,57848,57856,57864,57872,57880,57888,57896,57904,57912,57920,57929,57937,57945,57953,57961,57969,57977,57985,57993,58001,58009,58017,58025,58033,58041,58049,58057,58065,58073,58081,58089,58097,58105,58113,58121,58129,58137,58144,58152,58160,58168,58176,58184,58192,58200,58208,58216,58224,58232,58240,58248,58255,58263,58271,58279,58287,58295,58303,58311,58318,58326,58334,58342,58350,58358,58366,58373,58381,58389,58397,58405,58413,58420,58428,58436,58444,58452,58459,58467,58475,58483,58491,58498,58506,58514,58522,58530,58537,58545,58553,58561,58568,58576,58584,58592,58599,58607,58615,58622,58630,58638,58646,58653,58661,58669,58676,58684,58692,58699,58707,58715,58722,58730,58738,58745,58753,58761,58768,58776,58784,58791,58799,58807,58814,58822,58829,58837,58845,58852,58860,58867,58875,58883,58890,58898,58905,58913,58921,58928,58936,58943,58951,58958,58966,58973,58981,58989,58996,59004,59011,59019,59026,59034,59041,59049,59056,59064,59071,59079,59086,59094,59101,59109,59116,59124,59131,59139,59146,59153,59161,59168,59176,59183,59191,59198,59205,59213,59220,59228,59235,59243,59250,59257,59265,59272,59280,59287,59294,59302,59309,59316,59324,59331,59338,59346,59353,59361,59368,59375,59383,59390,59397,59404,59412,59419,59426,59434,59441,59448,59456,59463,59470,59477,59485,59492,59499,59507,59514,59521,59528,59536,59543,59550,59557,59565,59572,59579,59586,59593,59601,59608,59615,59622,59629,59637,59644,59651,59658,59665,59673,59680,59687,59694,59701,59708,59716,59723,59730,59737,59744,59751,59758,59765,59773,59780,59787,59794,59801,59808,59815,59822,59829,59836,59844,59851,59858,59865,59872,59879,59886,59893,59900,59907,59914,59921,59928,59935,59942,59949,59956,59963,59970,59977,59984,59991,59998,60005,60012,60019,60026,60033,60040,60047,60054,60061,60068,60075,60082,60089,60096,60103,60110,60117,60123,60130,60137,60144,60151,60158,60165,60172,60179,60186,60192,60199,60206,60213,60220,60227,60234,60240,60247,60254,60261,60268,60275,60281,60288,60295,60302,60309,60316,60322,60329,60336,60343,60350,60356,60363,60370,60377,60383,60390,60397,60404,60410,60417,60424,60431,60437,60444,60451,60458,60464,60471,60478,60484,60491,60498,60504,60511,60518,60525,60531,60538,60545,60551,60558,60565,60571,60578,60584,60591,60598,60604,60611,60618,60624,60631,60637,60644,60651,60657,60664,60670,60677,60684,60690,60697,60703,60710,60716,60723,60730,60736,60743,60749,60756,60762,60769,60775,60782,60788,60795,60801,60808,60814,60821,60827,60834,60840,60847,60853,60860,60866,60873,60879,60886,60892,60899,60905,60911,60918,60924,60931,60937,60944,60950,60956,60963,60969,60976,60982,60988,60995,61001,61007,61014,61020,61027,61033,61039,61046,61052,61058,61065,61071,61077,61084,61090,61096,61103,61109,61115,61121,61128,61134,61140,61147,61153,61159,61165,61172,61178,61184,61191,61197,61203,61209,61215,61222,61228,61234,61240,61247,61253,61259,61265,61271,61278,61284,61290,61296,61302,61309,61315,61321,61327,61333,61339,61346,61352,61358,61364,61370,61376,61382,61388,61395,61401,61407,61413,61419,61425,61431,61437,61443,61449,61455,61462,61468,61474,61480,61486,61492,61498,61504,61510,61516,61522,61528,61534,61540,61546,61552,61558,61564,61570,61576,61582,61588,61594,61600,61606,61612,61618,61624,61630,61636,61642,61648,61654,61659,61665,61671,61677,61683,61689,61695,61701,61707,61713,61719,61724,61730,61736,61742,61748,61754,61760,61765,61771,61777,61783,61789,61795,61801,61806,61812,61818,61824,61830,61835,61841,61847,61853,61859,61864,61870,61876,61882,61887,61893,61899,61905,61910,61916,61922,61928,61933,61939,61945,61951,61956,61962,61968,61973,61979,61985,61990,61996,62002,62007,62013,62019,62024,62030,62036,62041,62047,62053,62058,62064,62070,62075,62081,62086,62092,62098,62103,62109,62114,62120,62126,62131,62137,62142,62148,62153,62159,62165,62170,62176,62181,62187,62192,62198,62203,62209,62214,62220,62225,62231,62236,62242,62247,62253,62258,62264,62269,62275,62280,62286,62291,62297,62302,62307,62313,62318,62324,62329,62335,62340,62345,62351,62356,62362,62367,62372,62378,62383,62389,62394,62399,62405,62410,62415,62421,62426,62431,62437,62442,62447,62453,62458,62463,62469,62474,62479,62485,62490,62495,62500,62506,62511,62516,62521,62527,62532,62537,62542,62548,62553,62558,62563,62569,62574,62579,62584,62590,62595,62600,62605,62610,62616,62621,62626,62631,62636,62641,62647,62652,62657,62662,62667,62672,62677,62683,62688,62693,62698,62703,62708,62713,62718,62723,62729,62734,62739,62744,62749,62754,62759,62764,62769,62774,62779,62784,62789,62794,62799,62804,62809,62814,62819,62824,62829,62834,62839,62844,62849,62854,62859,62864,62869,62874,62879,62884,62889,62894,62899,62904,62909,62914,62919,62924,62928,62933,62938,62943,62948,62953,62958,62963,62968,62973,62977,62982,62987,62992,62997,63002,63006,63011,63016,63021,63026,63031,63035,63040,63045,63050,63055,63059,63064,63069,63074,63079,63083,63088,63093,63098,63102,63107,63112,63117,63121,63126,63131,63136,63140,63145,63150,63154,63159,63164,63168,63173,63178,63183,63187,63192,63197,63201,63206,63210,63215,63220,63224,63229,63234,63238,63243,63248,63252,63257,63261,63266,63271,63275,63280,63284,63289,63293,63298,63303,63307,63312,63316,63321,63325,63330,63334,63339,63343,63348,63352,63357,63361,63366,63370,63375,63379,63384,63388,63393,63397,63402,63406,63411,63415,63420,63424,63428,63433,63437,63442,63446,63451,63455,63459,63464,63468,63473,63477,63481,63486,63490,63494,63499,63503,63507,63512,63516,63521,63525,63529,63534,63538,63542,63546,63551,63555,63559,63564,63568,63572,63577,63581,63585,63589,63594,63598,63602,63606,63611,63615,63619,63623,63628,63632,63636,63640,63644,63649,63653,63657,63661,63665,63670,63674,63678,63682,63686,63690,63695,63699,63703,63707,63711,63715,63719,63723,63728,63732,63736,63740,63744,63748,63752,63756,63760,63764,63769,63773,63777,63781,63785,63789,63793,63797,63801,63805,63809,63813,63817,63821,63825,63829,63833,63837,63841,63845,63849,63853,63857,63861,63865,63869,63873,63877,63881,63885,63889,63892,63896,63900,63904,63908,63912,63916,63920,63924,63928,63932,63935,63939,63943,63947,63951,63955,63959,63962,63966,63970,63974,63978,63982,63985,63989,63993,63997,64001,64004,64008,64012,64016,64020,64023,64027,64031,64035,64038,64042,64046,64050,64053,64057,64061,64065,64068,64072,64076,64079,64083,64087,64091,64094,64098,64102,64105,64109,64113,64116,64120,64124,64127,64131,64134,64138,64142,64145,64149,64153,64156,64160,64163,64167,64171,64174,64178,64181,64185,64188,64192,64196,64199,64203,64206,64210,64213,64217,64220,64224,64227,64231,64234,64238,64241,64245,64248,64252,64255,64259,64262,64266,64269,64273,64276,64280,64283,64286,64290,64293,64297,64300,64304,64307,64310,64314,64317,64321,64324,64327,64331,64334,64337,64341,64344,64348,64351,64354,64358,64361,64364,64368,64371,64374,64378,64381,64384,64387,64391,64394,64397,64401,64404,64407,64410,64414,64417,64420,64423,64427,64430,64433,64436,64440,64443,64446,64449,64452,64456,64459,64462,64465,64468,64472,64475,64478,64481,64484,64487,64491,64494,64497,64500,64503,64506,64509,64512,64516,64519,64522,64525,64528,64531,64534,64537,64540,64543,64546,64549,64553,64556,64559,64562,64565,64568,64571,64574,64577,64580,64583,64586,64589,64592,64595,64598,64601,64604,64607,64610,64613,64616,64619,64622,64624,64627,64630,64633,64636,64639,64642,64645,64648,64651,64654,64657,64659,64662,64665,64668,64671,64674,64677,64679,64682,64685,64688,64691,64694,64697,64699,64702,64705,64708,64711,64713,64716,64719,64722,64725,64727,64730,64733,64736,64738,64741,64744,64747,64749,64752,64755,64757,64760,64763,64766,64768,64771,64774,64776,64779,64782,64784,64787,64790,64792,64795,64798,64800,64803,64806,64808,64811,64814,64816,64819,64821,64824,64827,64829,64832,64834,64837,64840,64842,64845,64847,64850,64852,64855,64857,64860,64863,64865,64868,64870,64873,64875,64878,64880,64883,64885,64888,64890,64893,64895,64898,64900,64902,64905,64907,64910,64912,64915,64917,64920,64922,64924,64927,64929,64932,64934,64936,64939,64941,64944,64946,64948,64951,64953,64955,64958,64960,64962,64965,64967,64969,64972,64974,64976,64979,64981,64983,64986,64988,64990,64992,64995,64997,64999,65001,65004,65006,65008,65010,65013,65015,65017,65019,65022,65024,65026,65028,65030,65033,65035,65037,65039,65041,65043,65046,65048,65050,65052,65054,65056,65059,65061,65063,65065,65067,65069,65071,65073,65075,65078,65080,65082,65084,65086,65088,65090,65092,65094,65096,65098,65100,65102,65104,65106,65108,65110,65112,65114,65116,65118,65120,65122,65124,65126,65128,65130,65132,65134,65136,65138,65140,65142,65144,65146,65148,65150,65152,65154,65155,65157,65159,65161,65163,65165,65167,65169,65171,65172,65174,65176,65178,65180,65182,65184,65185,65187,65189,65191,65193,65194,65196,65198,65200,65202,65203,65205,65207,65209,65211,65212,65214,65216,65218,65219,65221,65223,65224,65226,65228,65230,65231,65233,65235,65236,65238,65240,65241,65243,65245,65246,65248,65250,65251,65253,65255,65256,65258,65260,65261,65263,65264,65266,65268,65269,65271,65272,65274,65276,65277,65279,65280,65282,65283,65285,65287,65288,65290,65291,65293,65294,65296,65297,65299,65300,65302,65303,65305,65306,65308,65309,65311,65312,65314,65315,65316,65318,65319,65321,65322,65324,65325,65326,65328,65329,65331,65332,65333,65335,65336,65338,65339,65340,65342,65343,65344,65346,65347,65348,65350,65351,65352,65354,65355,65356,65358,65359,65360,65362,65363,65364,65365,65367,65368,65369,65370,65372,65373,65374,65375,65377,65378,65379,65380,65382,65383,65384,65385,65386,65388,65389,65390,65391,65392,65393,65395,65396,65397,65398,65399,65400,65402,65403,65404,65405,65406,65407,65408,65409,65410,65412,65413,65414,65415,65416,65417,65418,65419,65420,65421,65422,65423,65424,65425,65426,65427,65428,65429,65430,65431,65432,65433,65434,65435,65436,65437,65438,65439,65440,65441,65442,65443,65444,65445,65446,65447,65448,65448,65449,65450,65451,65452,65453,65454,65455,65456,65456,65457,65458,65459,65460,65461,65462,65462,65463,65464,65465,65466,65467,65467,65468,65469,65470,65471,65471,65472,65473,65474,65474,65475,65476,65477,65477,65478,65479,65480,65480,65481,65482,65482,65483,65484,65485,65485,65486,65487,65487,65488,65489,65489,65490,65491,65491,65492,65493,65493,65494,65494,65495,65496,65496,65497,65497,65498,65499,65499,65500,65500,65501,65502,65502,65503,65503,65504,65504,65505,65505,65506,65506,65507,65507,65508,65508,65509,65509,65510,65510,65511,65511,65512,65512,65513,65513,65514,65514,65515,65515,65515,65516,65516,65517,65517,65518,65518,65518,65519,65519,65519,65520,65520,65521,65521,65521,65522,65522,65522,65523,65523,65523,65524,65524,65524,65525,65525,65525,65526,65526,65526,65526,65527,65527,65527,65527,65528,65528,65528,65528,65529,65529,65529,65529,65530,65530,65530,65530,65530,65531,65531,65531,65531,65531,65532,65532,65532,65532,65532,65532,65532,65533,65533,65533,65533,65533,65533,65533,65533,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,65534,
};

#define linear_8(x, y, w) \
  ((uint32_t) (x) * (255 - (w)) + (uint32_t) (y) * (w) >> 8)

// Linear-interpolation point retrieval from a wavetable
uint16_t wt_linear(uint16_t const *const wt, uint16_t const i)
{
  uint16_t const e1 = i >> WT_INTERP;
  uint16_t const e2 = min(WT_MASK, e1 + 1);
  uint16_t const w1 = i & ~(-1 << WT_INTERP);
  uint16_t const w2 = (1 << WT_INTERP) - w1;
  return (uint32_t) pgm_read_word_near(wt + e1) * w1
       + (uint32_t) pgm_read_word_near(wt + e2) * w2 >> WT_INTERP;
}

uint16_t sine(uint16_t const t)
{
  uint16_t s = wt_linear(sine_qtable, (t & 0x4000 ? ~t & 0x3fff
                                                  :  t & 0x3fff) << 2);
  return t & 0x8000 ? 0xffff - s : s;
}

#define cosine(t) sine((t) + 16384)

#endif

#define STACK_SIZE   4
#define PROGRAM_SIZE 32

char const *const commands = " +*-^vqs:./abcdefO01234567";
uint8_t const command_len  = strlen(commands);

typedef uint16_t stack_value;

struct stack
{
  stack_value values[STACK_SIZE];
  uint8_t     top;

  stack_value peek() { return top > 0 ? values[top - 1] : 0; }
  stack_value pop()  { return top > 0 ? values[--top]   : 0; }
  void        push(stack_value const v)
    { if (top < STACK_SIZE) values[top++] = v; }

  void clear()
  {
    top = 0;
  }

  void init1(stack_value const v)
  {
    clear();
    push(v);
  }
};

struct program
{
  char code[PROGRAM_SIZE];

  void set(char const *const s)
  {
    for (int i = 0; i < PROGRAM_SIZE; ++i) code[i] = 0;
    for (int i = 0; s[i]; ++i)
    {
      char const *const k = strchr(commands, s[i]);
      code[i] = k >= commands && k < commands + command_len ? k - commands : 0;
    }
  }
};

void interpret(struct program const *const p, struct stack *const s)
{
  char c;

  stack_value v1;
  stack_value v2;

  for (int i = 0; i < PROGRAM_SIZE; ++i)
  {
    repeat_16( emit(); )
    switch (c = commands[p->code[i]])
    {
      case 'O': s->push(0); break;
      case '0': case '1': case '2': case '3':
      case '4': case '5': case '6': case '7':
        s->push(s->pop() >> 3 | c - '0' << 11);
        break;

      case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
        s->push(pots[c - 'a'].val() << 2);
        break;

      case '^': s->push(s->pop() << 4);                                 break;
      case 'v': s->push(s->pop() >> 4);                                 break;

      case '+': s->push(s->pop() + s->pop());                           break;
      case '-': s->push(-s->pop());                                     break;
      case '*': s->push((int32_t) s->pop() * (int32_t) s->pop() >> 12); break;
      case 'q': s->push(-(s->pop() > s->pop()));                        break;
      case 's': s->push(sine((uint32_t) s->pop() * 16) >> 4);           break;
      case ':': s->push(s->peek());                                     break;
      case '.': s->pop();                                               break;
      case '/': v1 = s->pop(); v2 = s->pop(); s->push(v1); s->push(v2); break;
    }
  }
}

#endif
#ifndef LCD_DETECTOR_H
#define LCD_DETECTOR_H

#ifndef ASYNC_ANALOG_H
#define ASYNC_ANALOG_H

#ifndef EMIT_H
#define EMIT_H

#define BUF_SIZE 2048
uint8_t a_buf[BUF_SIZE];
uint8_t c_buf[BUF_SIZE];
uint8_t l_buf[BUF_SIZE];

uint16_t emit_mask = 0xffff;

//*
// Original (less expensive) version:
#define emit()                                          \
  do {                                                  \
    uint16_t EMIT_t = TCNT3 & emit_mask;                \
    uint8_t  EMIT_a = a_buf[EMIT_t];                    \
    uint8_t  EMIT_c = c_buf[EMIT_t];                    \
    uint8_t  EMIT_l = l_buf[EMIT_t];                    \
    PORTA = EMIT_a;                                     \
    PORTC = EMIT_c;                                     \
    PORTL = EMIT_l;                                     \
  } while (0)
// */

/*
// More expensive version to test:
#define emit()                                          \
  do {                                                  \
    uint16_t EMIT_t = TCNT3 & emit_mask;                \
    uint8_t  EMIT_ah = a_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_al = a_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_ch = c_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_cl = c_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_lh = l_buf[EMIT_t] & 0xf0 >> 4;       \
    uint8_t  EMIT_ll = l_buf[EMIT_t] & 0x0f;            \
    uint8_t  EMIT_a = EMIT_ah << 4 | EMIT_al;           \
    uint8_t  EMIT_c = EMIT_ch << 4 | EMIT_cl;           \
    uint8_t  EMIT_l = EMIT_lh << 4 | EMIT_ll;           \
    PORTA = EMIT_a;                                     \
    PORTC = EMIT_c;                                     \
    PORTL = EMIT_l;                                     \
  } while (0)
// */

#endif

uint16_t *async_analog_dest = 0;

#define async_analog_ready() (!async_analog_dest)

#define async_analog_check()                                            \
  do                                                                    \
  {                                                                     \
    if (async_analog_dest && !bit_is_set(ADCSRA, ADSC))                 \
    {                                                                   \
      uint8_t low, high;                                                \
      low  = ADCL;                                                      \
      high = ADCH;                                                      \
      *async_analog_dest = high << 8 | low;                             \
      async_analog_dest = 0;                                            \
    }                                                                   \
  } while (0)

#define async_analog_read(pin, into)                                    \
  do                                                                    \
  {                                                                     \
    if (async_analog_ready())                                           \
    {                                                                   \
      async_analog_dest = (into);                                       \
      ADMUX   = DEFAULT << 6 | (pin) & 7;                               \
      ADCSRB  = ((pin) >> 3 & 1) << MUX5;                               \
      ADCSRA |= 1 << ADSC;                                              \
    }                                                                   \
  } while (0)

class AnalogMonitor
{
 private:
  uint8_t  pin;
  uint8_t  last_value;
  uint16_t value;

 public:
  AnalogMonitor(uint8_t _pin): pin(_pin), last_value(0), value(0) {}

  void reset()
  {
    last_value = value >> 2;
  }

  void sync()
  {
    update();
    while (!async_analog_ready())
    {
      emit();
      async_analog_check();
    }
    reset();
  }

  char delta(int shift)
  {
    async_analog_check();
    return ((char) (value >> 2) - (char) last_value) + (1 << shift - 1)
           >> shift;
  }

  void update()
  {
    async_analog_check();
    async_analog_read(pin, &value);
  }

  uint16_t val()
  {
    async_analog_check();
    return value;
  }
};

#define N_POTS (sizeof(pots) / sizeof(AnalogMonitor))
#define CODE_POT 1
#define MOVE_POT 2
#define LCD_POT  6

AnalogMonitor pots[] = { AnalogMonitor(9),
                         AnalogMonitor(10),
                         AnalogMonitor(11),
                         AnalogMonitor(12),
                         AnalogMonitor(13),
                         AnalogMonitor(14),
                         AnalogMonitor(0) };

bool any_pot_delta = false;
char which_pot     = 0;

#define check_pot()                                             \
  do {                                                          \
    if (++which_pot >= N_POTS) which_pot = 0;                   \
    pots[which_pot].update();                                   \
    any_pot_delta |= pots[which_pot].delta(5);                  \
  } while (0)

#endif

#define LCDNone 0
#define LCDLeft 1
#define LCDRight 2
#define LCDUp 3
#define LCDDown 4
#define LCDSelect 5

class LCDKey
{
 private:
  bool expecting_key = false;

 public:
  int command(int const val)
  {
    int const a = val >> 6;
    if (!expecting_key) {
      if (a == 15) expecting_key = true;
      return LCDNone;
    }

    switch (a) {
    case 3:  expecting_key = false; return LCDDown;
    case 1:  expecting_key = false; return LCDUp;
    case 6:  expecting_key = false; return LCDLeft;
    case 0:  expecting_key = false; return LCDRight;
    case 10: expecting_key = false; return LCDSelect;
    default:
      expecting_key = true;
      return LCDNone;
    }
  }
};

#endif
#ifndef REPEAT_H
#define REPEAT_H

#define repeat_2(x) x x
#define repeat_4(x) repeat_2(repeat_2(x))
#define repeat_8(x) repeat_4(repeat_2(x))
#define repeat_16(x) repeat_4(repeat_4(x))
#define repeat_32(x) repeat_8(repeat_4(x))
#define repeat_64(x) repeat_8(repeat_8(x))

#endif
#ifndef SHAPES_H
#define SHAPES_H

class shape
{
 public:
  virtual uint16_t max_dxdt()    = 0;
  virtual uint32_t periodicity() = 0;
};

class square_wave : public shape
{
 public:
  uint16_t low, high;
  uint32_t don, doff;

  square_wave(uint32_t _dt) : don(_dt >> 1), doff(_dt >> 1),
                              low(0), high(0xffff) {}
  square_wave(uint32_t _don, uint32_t _doff) : don(_don), doff(_doff),
                                               low(0), high(0xffff) {}
  square_wave(uint32_t _don, uint32_t _doff, uint16_t _low, uint16_t _high)
    : don(_don), doff(_doff), low(_low), high(_high) {}

  virtual uint16_t max_dxdt()    { return 0xffff; }
  virtual uint32_t periodicity() { return don + doff; }
};

#endif

LiquidCrystal lcd(8, 9, 4, 5, 6, 7);
LCDKey        lcdkey;

int edit_point = 0;
bool run_mode  = false;

void update_display()
{
  lcd.home();
  lcd.clear();

  for (int i = 0; i < PROGRAM_SIZE / 2; ++i)
    lcd.print(commands[p.code[i]]);
  lcd.setCursor(0, 1);
  for (int i = 0; i < PROGRAM_SIZE / 2; ++i)
    lcd.print(commands[p.code[i + PROGRAM_SIZE / 2]]);
  lcd.setCursor(edit_point & 0x0f, edit_point >> 4);

  if (run_mode) lcd.noCursor();
  else          lcd.cursor();
}

void setup()
{
  DDRL = DDRC = DDRA = 0xff;

  lcd.begin(16, 2);
  Serial.begin(9600);

  for (int i = 0; i < PROGRAM_SIZE; ++i) p.code[i] = 0;
  p.set("b*^: s / c+s");

  TCCR3B = 0x0a;
  TCCR3A = 0x00;
  OCR3A  = BUF_SIZE;

  for (int i = 0; i < N_POTS; ++i) pots[i].sync();
  while (1)
  {
    check_pot();

    if (run_mode)
    {
      int cmd = lcdkey.command(pots[LCD_POT].val());
      if (cmd == LCDSelect)    run_mode = false;
      else if (cmd != LCDNone) recompile();
      else
      {
        for (int i = 0; i < 128; ++i)
        {
          repeat_32( emit(); )
        }

        if (any_pot_delta)
        {
          any_pot_delta = false;
          for (int i = 0; i < N_POTS; ++i) pots[i].sync();
          recompile();
        }
      }
    }
    else
    {
      sei();
      PORTA = PORTC = PORTL = 0;

      if (Serial.available())
      {
        int i;
        char buf[PROGRAM_SIZE + 1];
        char c = 0;
        for (i = 0; (c = Serial.read()) >= ' ' && i < PROGRAM_SIZE; ++i)
          buf[i] = c;
        buf[i] = 0;
        p.set(buf);
        recompile();
        run_mode = true;
        update_display();
      }
      else
      {
        char move   = pots[MOVE_POT].delta(4);
        char diff   = pots[CODE_POT].delta(4);
        bool update = false;

        switch (lcdkey.command(pots[LCD_POT].val()))
        {
          case LCDRight:  update = true; ++edit_point;         break;
          case LCDLeft:   update = true; --edit_point;         break;
          case LCDUp:     update = true; ++p.code[edit_point]; break;
          case LCDDown:   update = true; --p.code[edit_point]; break;
          case LCDSelect: update = true; run_mode = true;      break;
          case LCDNone:
            if (move)
            {
              edit_point += move;
              pots[MOVE_POT].reset();
              update = true;
            }
            else if (diff)
            {
              p.code[edit_point] += diff;
              pots[CODE_POT].reset();
              update = true;
            }
            break;
        }

        edit_point &= PROGRAM_SIZE - 1;
        p.code[edit_point] += command_len;
        p.code[edit_point] %= command_len;

        if (run_mode)
        {
          recompile();
          for (int i = 0; i < N_POTS; ++i) pots[i].reset();
          cli();
        }

        if (update) update_display();
      }
    }
  }
}

void loop()
{}
